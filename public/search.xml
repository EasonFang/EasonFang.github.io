<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用环信webIM API搭建简易在线聊天室</title>
      <link href="/%E7%8E%AF%E4%BF%A1%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%9B%86%E6%88%90/"/>
      <url>/%E7%8E%AF%E4%BF%A1%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>  最近公司项目中需要一个网页聊天室功能，由于需求比较简单聊天室只需具备基本的聊天功能即可。<br>我们采用了环信webIM快速实现。<br><a id="more"></a><br>环信 Web IM SDK 为PC/移动 Web 应用，提供完善的即时通信功能开发能力，屏蔽其内部复杂细节，对外提供较为简洁的 API 接口，方便第三方应 用快速集成即时通信功能。</p><p>注意：如果您是 Web SDK 的新用户，请参考本文档集成最新版本。 新版的 SDK 保证兼容旧版sdk的所有接口，同时提供了一些新的接口，所以 新版的 SDK 可以直接替换旧版的 SDK</p><h3 id="环信webIM-SDK功能说明"><a href="#环信webIM-SDK功能说明" class="headerlink" title="环信webIM SDK功能说明"></a>环信webIM SDK功能说明</h3><p>Easemob Web IM SDK 已支持如下功能：</p><p>SDK 本身已支持 IE8+、FireFox10+、Chrome54+、Safari6+ 之间文本、表情、图片、音频、地址消息相互发送。<br>SDK 支持 Web 端之间，Web 端与 Android/iOS 端相互添加、删除好友功能。<br>SDK 支持与 iOS、Android SDK 之间相互发送文本、表情、图片、音频、地址消息。<br>SDK 对于消息的处理方式如下：<br>文本、表情消息，直接发送、接收。<br>附件消息（图片、音频、文件等），SDK 上传附件到服务器，然后发送附件基本信息（发送方上传的附件 URL、文件名等），接收方根据附件的 URL、secret 和自身的登录信息，以流的形式从服务器上下载到本地处理。<br>SDK 支持浏览器本地缓存(IndexDB)<br>提供 Demo，方便大家参考，已实现聊天、添加/删除好友、群组管理、黑名单、音视频功能。备注：<br>Demo 默认支持的图片消息格式：PNG、JPG、BMP、GIF<br>Demo 默认支持的音频消息格式：MP3、AMR、WMV<br>Demo 默认支持的文件消息格式：zip、txt、doc、PDF</p><h3 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var conn = &#123;&#125;;</span><br><span class="line">WebIM.config = config;</span><br><span class="line">conn = WebIM.conn = new WebIM.connection(&#123;</span><br><span class="line">    isHttpDNS: WebIM.config.isHttpDNS,</span><br><span class="line">    isMultiLoginSessions: WebIM.config.isMultiLoginSessions,</span><br><span class="line">    https: WebIM.config.https,</span><br><span class="line">    url: WebIM.config.xmppURL,</span><br><span class="line">    isAutoLogin: false,</span><br><span class="line">    heartBeatWait: WebIM.config.heartBeatWait,</span><br><span class="line">    autoReconnectNumMax: WebIM.config.autoReconnectNumMax,</span><br><span class="line">    autoReconnectInterval: WebIM.config.autoReconnectInterval,</span><br><span class="line">    isStropheLog: WebIM.config.isStropheLog,</span><br><span class="line">    delivery: WebIM.config.delivery</span><br><span class="line">&#125;)</span><br><span class="line">// WebIM.config 为之前集成里介绍的WebIMConfig.js</span><br></pre></td></tr></table></figure><h3 id="添加回调函数"><a href="#添加回调函数" class="headerlink" title="添加回调函数"></a>添加回调函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">conn.listen(&#123;</span><br><span class="line">    onOpened: function ( message ) &#123;          //连接成功回调</span><br><span class="line">        // 如果isAutoLogin设置为false，那么必须手动设置上线，否则无法收消息</span><br><span class="line">        // 手动上线指的是调用conn.setPresence(); 如果conn初始化时已将isAutoLogin设置为true</span><br><span class="line">        // 则无需调用conn.setPresence();             </span><br><span class="line">    &#125;,  </span><br><span class="line">    onClosed: function ( message ) &#123;&#125;,         //连接关闭回调</span><br><span class="line">    onTextMessage: function ( message ) &#123;&#125;,    //收到文本消息</span><br><span class="line">    onEmojiMessage: function ( message ) &#123;&#125;,   //收到表情消息</span><br><span class="line">    onPictureMessage: function ( message ) &#123;&#125;, //收到图片消息</span><br><span class="line">    onCmdMessage: function ( message ) &#123;&#125;,     //收到命令消息</span><br><span class="line">    onAudioMessage: function ( message ) &#123;&#125;,   //收到音频消息</span><br><span class="line">    onLocationMessage: function ( message ) &#123;&#125;,//收到位置消息</span><br><span class="line">    onFileMessage: function ( message ) &#123;&#125;,    //收到文件消息</span><br><span class="line">    onVideoMessage: function (message) &#123;</span><br><span class="line">        var node = document.getElementById(&apos;privateVideo&apos;);</span><br><span class="line">        var option = &#123;</span><br><span class="line">            url: message.url,</span><br><span class="line">            headers: &#123;</span><br><span class="line">              &apos;Accept&apos;: &apos;audio/mp4&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            onFileDownloadComplete: function (response) &#123;</span><br><span class="line">                var objectURL = WebIM.utils.parseDownloadResponse.call(conn, response);</span><br><span class="line">                node.src = objectURL;</span><br><span class="line">            &#125;,</span><br><span class="line">            onFileDownloadError: function () &#123;</span><br><span class="line">                console.log(&apos;File down load error.&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        WebIM.utils.download.call(conn, option);</span><br><span class="line">    &#125;,   //收到视频消息</span><br><span class="line">    onPresence: function ( message ) &#123;&#125;,       //处理“广播”或“发布-订阅”消息，如联系人订阅请求、处理群组、聊天室被踢解散等消息</span><br><span class="line">    onRoster: function ( message ) &#123;&#125;,         //处理好友申请</span><br><span class="line">    onInviteMessage: function ( message ) &#123;&#125;,  //处理群组邀请</span><br><span class="line">    onOnline: function () &#123;&#125;,                  //本机网络连接成功</span><br><span class="line">    onOffline: function () &#123;&#125;,                 //本机网络掉线</span><br><span class="line">    onError: function ( message ) &#123;&#125;,          //失败回调</span><br><span class="line">    onBlacklistUpdate: function (list) &#123;       //黑名单变动</span><br><span class="line">        // 查询黑名单，将好友拉黑，将好友从黑名单移除都会回调这个函数，list则是黑名单现有的所有好友信息</span><br><span class="line">        console.log(list);</span><br><span class="line">    &#125;,</span><br><span class="line">    onReceivedMessage: function(message)&#123;&#125;,    //收到消息送达服务器回执</span><br><span class="line">    onDeliveredMessage: function(message)&#123;&#125;,   //收到消息送达客户端回执</span><br><span class="line">    onReadMessage: function(message)&#123;&#125;,        //收到消息已读回执</span><br><span class="line">    onCreateGroup: function(message)&#123;&#125;,        //创建群组成功回执（需调用createGroupNew）</span><br><span class="line">    onMutedMessage: function(message)&#123;&#125;        //如果用户在A群组被禁言，在A群发消息会走这个回调并且消息不会传递给群其它成员</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="单聊发送文本信息"><a href="#单聊发送文本信息" class="headerlink" title="单聊发送文本信息"></a>单聊发送文本信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var sendPrivateText = function () &#123;</span><br><span class="line">    var id = conn.getUniqueId();                 // 生成本地消息id</span><br><span class="line">    var msg = new WebIM.message(&apos;txt&apos;, id);      // 创建文本消息</span><br><span class="line">    msg.set(&#123;</span><br><span class="line">        msg: &apos;message content&apos;,                  // 消息内容</span><br><span class="line">        to: &apos;username&apos;,                          // 接收消息对象（用户id）</span><br><span class="line">        roomType: false,                          </span><br><span class="line">        success: function (id, serverMsgId) &#123;</span><br><span class="line">            console.log(&apos;send private text Success&apos;);  </span><br><span class="line">        &#125;,                                       // 对成功的相关定义，sdk会将消息id登记到日志进行备份处理</span><br><span class="line">        fail: function(e)&#123;</span><br><span class="line">            console.log(&quot;Send private text error&quot;);  </span><br><span class="line">        &#125;                                        // 对失败的相关定义，sdk会将消息id登记到日志进行备份处理</span><br><span class="line">    &#125;);</span><br><span class="line">    conn.send(msg.body);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环信webIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt style="width:100%"></p><a id="more"></a><p>##</p><p>##</p><p>##</p><hr>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>  观察者模式又被称为发布-订阅模型或消息机制。</p><p>基本思想是观察者一个静态（或全局）对象，为大家提供三个方法：发布、订阅、取消订阅。<br><a id="more"></a><br>想得到消息的订阅者需要通过订阅某些消息，当发布者发布某些消息的时候对应的订阅者就收到消息了。订阅者也可以取消订阅。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> Observer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _messages = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        regist: <span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>) </span>&#123;   <span class="comment">//订阅消息</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> _messages[type] === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">                _messages[type] = [fn];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _messages[type].push(fn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        fire: <span class="function"><span class="keyword">function</span>(<span class="params">type,args</span>)</span>&#123;     <span class="comment">//发布消息</span></span><br><span class="line">            <span class="keyword">if</span>(!_messages[type])</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> events = &#123;</span><br><span class="line">                type: type,</span><br><span class="line">                args: args;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            _messages[type].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">                item.call(<span class="keyword">this</span>,events);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,  </span><br><span class="line">        remove: <span class="function"><span class="keyword">function</span>(<span class="params">type,args</span>)</span>&#123;   <span class="comment">//取消订阅</span></span><br><span class="line">            <span class="keyword">if</span>(_messages[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">                _messages[type].lastIndexOf(fn) &amp;&amp; _messages[type].splice(i,<span class="number">1</span>);</span><br><span class="line">                <span class="comment">/*var i = _messages[type].length-1;</span></span><br><span class="line"><span class="comment">                for(; i&gt;-1; i--)&#123;</span></span><br><span class="line"><span class="comment">                    _messages[type][i] === fn &amp;&amp; _messages[type].splice(i,1);</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>使用场景，用户在留言评论的同时用户消息栏也相应改变。这里订阅者是评论模块和消息模块，发布者是用户操作模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//评论模块：</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Observer.regist(<span class="string">'addCommentMessage'</span>,addMsg); </span><br><span class="line">    Observer.regist(<span class="string">'addCommentMessage'</span>,removeMsg); </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addMsg</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeMsg</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Observer.regist(<span class="string">'addCommentMessage'</span>,changeMsgNum); </span><br><span class="line">    Observer.regist(<span class="string">'removeCommentMessage'</span>,changeMsgNum); </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeMsgNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户操作模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#submitBtn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        Observer.fire(<span class="string">'addCommentMessage'</span>,&#123;</span><br><span class="line">            text: text.value,</span><br><span class="line">            num: <span class="number">1</span></span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;;</span><br><span class="line">    $(<span class="string">"#deleteBtn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        Observer.fire(<span class="string">'removeCommentMessage'</span>,&#123;</span><br><span class="line">            num: <span class="number">-1</span></span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器性能接口performance.timing</title>
      <link href="/performance.timing/"/>
      <url>/performance.timing/</url>
      
        <content type="html"><![CDATA[<p>利用window.performance.timing进行性能分析</p><a id="more"></a><h3 id="window-performance-timing中相关属性语义："><a href="#window-performance-timing中相关属性语义：" class="headerlink" title="window.performance.timing中相关属性语义："></a>window.performance.timing中相关属性语义：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//  .navigationStart 准备加载页面的起始时间</span><br><span class="line">//  .unloadEventStart 如果前一个文档和当前文档同源,返回前一个文档开始unload的时间</span><br><span class="line">//  .unloadEventEnd 如果前一个文档和当前文档同源,返回前一个文档开始unload结束的时间</span><br><span class="line">//  .redirectStart   如果有重定向,这里是重定向开始的时间.</span><br><span class="line">//  .redirectEnd     如果有重定向,这里是重定向结束的时间.</span><br><span class="line">//  .fetchStart        开始检查缓存或开始获取资源的时间</span><br><span class="line">//  .domainLookupStart   开始进行dns查询的时间</span><br><span class="line">//  .domainLookupEnd     dns查询结束的时间</span><br><span class="line">//  .connectStart                  开始建立连接请求资源的时间</span><br><span class="line">//  .connectEnd                     建立连接成功的时间.</span><br><span class="line">//  .secureConnectionStart      如果是https请求.返回ssl握手的时间</span><br><span class="line">//  .requestStart                     开始请求文档时间(包括从服务器,本地缓存请求)</span><br><span class="line">//  .responseStart                   接收到第一个字节的时间</span><br><span class="line">//  .responseEnd                      接收到最后一个字节的时间.</span><br><span class="line">//  .domLoading                       ‘current document readiness’ 设置为 loading的时间 (这个时候还木有开始解析文档)</span><br><span class="line">//  .domInteractive               文档解析结束的时间</span><br><span class="line">//  .domContentLoadedEventStart    DOMContentLoaded事件开始的时间</span><br><span class="line">//  .domContentLoadedEventEnd      DOMContentLoaded事件结束的时间</span><br><span class="line">//  .domComplete        current document readiness被设置 complete的时间</span><br><span class="line">//  .loadEventStart      触发onload事件的时间</span><br><span class="line">//  .loadEventEnd       onload事件结束的时间</span><br></pre></td></tr></table></figure><h3 id="主要性能分析指标"><a href="#主要性能分析指标" class="headerlink" title="主要性能分析指标"></a>主要性能分析指标</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    handleAddListener(<span class="string">'load'</span>, getTiming)</span><br><span class="line">    <span class="keyword">function</span> handleAddListener(<span class="built_in">type</span>, fn) &#123;</span><br><span class="line">        <span class="keyword">if</span>(window.addEventListener) &#123;</span><br><span class="line">            window.addEventListener(<span class="built_in">type</span>, fn)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            window.attachEvent(<span class="string">'on'</span> + <span class="built_in">type</span>, fn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">getTiming</span></span>() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            var time = performance.timing;</span><br><span class="line">            var timingObj = &#123;&#125;;</span><br><span class="line">            var loadTime = (time.loadEventEnd - time.loadEventStart) / 1000;</span><br><span class="line">            <span class="keyword">if</span>(loadTime &lt; 0) &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">                    getTiming();</span><br><span class="line">                &#125;, 200);</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            timingObj[<span class="string">'重定向时间'</span>] = (time.redirectEnd - time.redirectStart) / 1000;</span><br><span class="line">            timingObj[<span class="string">'DNS解析时间'</span>] = (time.domainLookupEnd - time.domainLookupStart) / 1000;</span><br><span class="line">            timingObj[<span class="string">'TCP完成握手时间'</span>] = (time.connectEnd - time.connectStart) / 1000;</span><br><span class="line">            timingObj[<span class="string">'HTTP请求响应完成时间'</span>] = (time.responseEnd - time.requestStart) / 1000;</span><br><span class="line">            timingObj[<span class="string">'DOM开始加载前所花费时间'</span>] = (time.responseEnd - time.navigationStart) / 1000;</span><br><span class="line">            timingObj[<span class="string">'DOM加载完成时间'</span>] = (time.domComplete - time.domLoading) / 1000;</span><br><span class="line">            timingObj[<span class="string">'DOM结构解析完成时间'</span>] = (time.domInteractive - time.domLoading) / 1000;</span><br><span class="line">            timingObj[<span class="string">'脚本加载时间'</span>] = (time.domContentLoadedEventEnd - time.domContentLoadedEventStart) / 1000;</span><br><span class="line">            timingObj[<span class="string">'onload事件时间'</span>] = (time.loadEventEnd - time.loadEventStart) / 1000;</span><br><span class="line">            timingObj[<span class="string">'页面完全加载时间'</span>] = (timingObj[<span class="string">'重定向时间'</span>] + timingObj[<span class="string">'DNS解析时间'</span>] + timingObj[<span class="string">'TCP完成握手时间'</span>] + timingObj[<span class="string">'HTTP请求响应完成时间'</span>] + timingObj[<span class="string">'DOM结构解析完成时间'</span>] + timingObj[<span class="string">'DOM加载完成时间'</span>]);</span><br><span class="line">            <span class="keyword">for</span>(item <span class="keyword">in</span> timingObj) &#123;</span><br><span class="line">                console.log(item + <span class="string">":"</span> + timingObj[item] + <span class="string">'毫秒(ms)'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(performance.timing);</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">            console.log(timingObj)</span><br><span class="line">            console.log(performance.timing);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
